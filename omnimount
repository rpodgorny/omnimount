#!/usr/bin/python3

'''
Usage:
  omnimount [options] <mount_point>

Arguments:
  <mount_point>  Mount point.

Options:
  --list=<list_file>  Filename of remote host list. [default: ~/.omnimount.conf]
  --no-hpn            Don't use HPN even if detected.
'''

__version__ = '0.2'

import sys
import os
import os.path
import subprocess
import time
import socket
import docopt
import logging


class LocalMount:
	def __init__(self, dir, mount_dir):
		self.dir = dir
		self.mount_dir = mount_dir

	def check(self):
		return True

	def mount(self):
		# TODO: do some checking and remove this try/except shit
		try:
			os.unlink(self.mount_dir)
		except:
			pass

		logging.info('symlinking local directory %s' % self.dir)
		os.symlink(self.dir, self.mount_dir)

	def umount(self):
		logging.info('removing symlink for directory %s' % self.dir)
		os.unlink(self.mount_dir)


class RemoteMount:
	def __init__(self, host, mount_dir, no_hpn=False):
		self.host = host
		self.mount_dir = mount_dir
		self.no_hpn = no_hpn
		self.process = None

	def check(self):
		if not self.process:
			return False
		ret = self.process.poll()
		if ret is None:
			return True
		logging.debug('return code for %s is %s' % (self.host, ret))
		self.process = None
		return False

	def mount(self):
		logging.info('mounting %s on %s' % (self.host, self.mount_dir))

		subprocess.call('fusermount -u %s' % self.mount_dir, shell=True)

		# TODO: actually check for existence and don't do this try/except shit
		try:
			os.mkdir(self.mount_dir)
		except OSError:
			pass

		if self.no_hpn:
			is_hpn = False
		else:
			is_hpn = 'hpn' in subprocess.check_output('ssh -V 2>&1', shell=True).decode()

		if is_hpn:
			logging.debug('hpn detected')
			cmd = 'sshfs -f -o reconnect -o ssh_command="ssh -oNoneEnabled=yes -oNoneSwitch=yes -oConnectTImeout=2 -oCompressionLevel=1 -oServerAliveInterval=10"  %s: %s' % (self.host, self.mount_dir)
		else:
			cmd = 'sshfs -f -o reconnect -oConnectTimeout=2 -oCompressionLevel=1 -oServerAliveInterval=10 %s %s' % (self.host, self.mount_dir)

		print(cmd)
		self.process = subprocess.Popen(cmd, shell=True)

	def umount(self):
		if not self.process:
			print ('%s on %s already unmounted' % (self.host, self.mount_dir))
			return

		logging.info('unmounting %s from %s' % (self.host, self.mount_dir))
		self.process.terminate()
		self.process.wait()
		self.process = None


class UnionMount:
	def __init__(self, mount_dir, branches):
		self.mount_dir = mount_dir
		self.branches = branches
		self.process = None

	def mount(self):
		# TODO: actually check for existence and don't do this try/except shit
		try:
			os.mkdir('%s/union' % self.mount_dir)
		except OSError:
			pass

		logging.info('mounting union')
		union_str = ':'.join([i + '=RW' for i in self.branches])
		self.process = subprocess.Popen('unionfs -o relaxed_permissions %s %s/union' % (union_str, self.mount_dir), shell=True)

	def umount(self):
		logging.info('terminating union mount')
		self.process.terminate()
		self.process.wait()
		self.process = None

		# TODO: the above does not seem to work so call explicit unmount
		subprocess.call('fusermount -u %s/union' % self.mount_dir, shell=True)


def is_local(host):
	if socket.gethostname() in host:
		return True
	return False


def logging_setup(level):
	logging.basicConfig(level=level)


def main():
	args = docopt.docopt(__doc__, version=__version__)

	logging_setup('DEBUG')

	list_fn = os.path.expanduser(args['--list'])
	no_hpn = args['--no-hpn']
	mount_root = args['<mount_point>']

	f = open(list_fn, 'r')
	hosts = [i.strip() for i in f.readlines()]
	f.close()

	if not os.path.isdir(mount_root):
		logging.info('%s does not exist, creating it' % mount_root)
		os.mkdir(mount_root)

	mounts = []

	for host in hosts:
		if host.startswith('#'): continue

		mount_path = '%s/%s' % (mount_root, host.replace(':', '--').replace('/', '-'))

		if is_local(host):
			_, local_dir = host.split(':', 1)
			if not local_dir.startswith('/'): local_dir = os.path.expanduser('~/%s' % local_dir)

			m = LocalMount(local_dir, mount_path)
		else:
			m = RemoteMount(host, mount_path, no_hpn)

		m.mount()
		mounts.append(m)

	union = UnionMount(mount_root, [i.mount_dir for i in mounts])
	union.mount()

	try:
		while 1:
			for i in mounts:
				if not m.check():
					m.mount()
			time.sleep(1)  # TODO: hard-coded shit
	except KeyboardInterrupt:
		pass

	union.umount()

	for m in mounts:
		m.umount()


if __name__ == '__main__':
	main()
